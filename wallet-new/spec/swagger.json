{
    "swagger": "2.0",
    "host": "127.0.0.1:8090",
    "info": {
        "version": "2.0",
        "title": "Cardano Wallet API",
        "license": {
            "url": "http://mit.com",
            "name": "MIT"
        },
        "description": "This is the specification for the Cardano Wallet API, automatically generated\nas a [Swagger](https://swagger.io/) spec from the [Servant](http://haskell-servant.readthedocs.io/en/stable/) API\nof [Cardano](https://github.com/input-output-hk/cardano-sl).\n\n### Request format (all versions)\n\nIssuing requests against this API is conceptually not very different from any other web service out there. The API\nis versioned, meaning is possible to access different versions of the latter by changing the _version number_ in the URL.\n\nFor example, _omitting_ the version number of passing `v0` would call the version 0 of the API. Examples:\n\n```\n/api/version\n/api/v0/version\n```\n\nBoth URL above will return the same result. Compatibility between major versions is not _guaranteed_, i.e. the\nrequest & response formats might differ.\n\n### Response format (V1 onwards)\n\n**All GET requests of the API are paginated by default**. Whilst this can be a source of surprise, is\nthe best way of ensuring the performance of GET requests is not affected by the size of the data storage.\n\nVersion `V1` introduced a different way of requesting information to the API. In particular, GET requests\nwhich returns a _collection_ (i.e. typically a JSON array of resources) lists extra parameters which can be\nused to modify the shape of the response. In particular, those are:\n\n* `page`: (Default value: **1**).\n* `per_page`: (Default value: **10**)\n* `extended`: (Default value: `false`)\n* `Daedalus-Response-Format`: (Default value: `null`)\n\nFor a more accurate description, see the section `Parameters` of each GET request, but as a brief overview\nthe first two control how many results and which results to access in a paginated request. The other two\n(one to be passed as a query parameter, the other as an HTTP Header) controls the response format. By omitting\nboth, the \"naked\" collection will be returned. For example, requesting for a list of _Accounts_ might issue,\nin this case:\n\n``` json\n[\n    {\n        \"amount\": 1,\n        \"addresses\": [\n            {\n                \"id\": \"DEADBeef\"\n            },\n            {\n                \"id\": \"DEADBeef\"\n            }\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"123456\"\n    },\n    {\n        \"amount\": 3,\n        \"addresses\": [\n            {\n                \"id\": \"DEADBeef\"\n            }\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"DEADBeef\"\n    }\n]\n```\n\nIn the second case, instead:\n\n``` json\n{\n    \"data\": [\n        {\n            \"amount\": 2,\n            \"addresses\": [\n                {\n                    \"id\": \"DEADBeef\"\n                }\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"amount\": 2,\n            \"addresses\": [\n                {\n                    \"id\": \"DEADBeef\"\n                },\n                {\n                    \"id\": \"123456\"\n                }\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 96,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}\n```\n\n### Dealing with errors (V1 onwards)\n\nIn case a request cannot be served by the API, a non-2xx HTTP response will be issue, together with a\n[JSend-compliant](https://labs.omniti.com/labs/jsend) JSON Object describing the error in detail together\nwith a numeric error code which can be used by API consumers to implement proper error handling in their\napplication. For example, here's a typical error which might be issued:\n\n``` json\n{\n    \"status\": \"error\",\n    \"code\": 600,\n    \"message\": \"The requested Wallet cannot be found.\"\n}\n```\n"
    },
    "definitions": {
        "Wallet": {
            "example": {
                "name": "My wallet",
                "assurance": "assuranceNormal",
                "id": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg",
                "unit": 3
            },
            "required": [
                "name",
                "assurance",
                "id",
                "unit"
            ],
            "type": "object",
            "description": "A Wallet.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "assurance": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "readOnly": true
                },
                "unit": {
                    "type": "number"
                }
            }
        },
        "Payment": {
            "example": {
                "sourceAccount": {
                    "amount": 2,
                    "addresses": [
                        {
                            "id": "DEADBeef"
                        },
                        {
                            "id": "123456"
                        }
                    ],
                    "name": "My account",
                    "walletId": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg",
                    "id": "DEADBeef"
                },
                "amount": 1,
                "destinationAddress": {
                    "id": "DEADBeef"
                }
            },
            "required": [
                "sourceAccount",
                "amount",
                "destinationAddress"
            ],
            "type": "object",
            "description": "A request for exchange of `Coins` from one entity to another.",
            "properties": {
                "sourceAccount": {
                    "required": [
                        "amount",
                        "addresses",
                        "name",
                        "walletId",
                        "id"
                    ],
                    "type": "object",
                    "properties": {
                        "amount": {
                            "type": "number"
                        },
                        "addresses": {
                            "items": {
                                "required": [
                                    "id"
                                ],
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string"
                                    }
                                }
                            },
                            "type": "array"
                        },
                        "name": {
                            "type": "string"
                        },
                        "walletId": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        }
                    }
                },
                "amount": {
                    "type": "number"
                },
                "destinationAddress": {
                    "required": [
                        "id"
                    ],
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "WalletVersion": {
            "example": {
                "gitRev": "6f1131adca2f0bc6d24c9181cabd2b9e0704fd79",
                "version": "v0"
            },
            "required": [
                "gitRev",
                "version"
            ],
            "type": "object",
            "description": "The Wallet version, including the API version and the Git revision.",
            "properties": {
                "gitRev": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "OneOf [Account] (ExtendedResponse [Account])": {
            "example": [
                {
                    "amount": 3,
                    "addresses": [
                        {
                            "id": "123456"
                        }
                    ],
                    "name": "My account",
                    "walletId": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg",
                    "id": "DEADBeef"
                }
            ],
            "items": {
                "required": [
                    "amount",
                    "addresses",
                    "name",
                    "walletId",
                    "id"
                ],
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number"
                    },
                    "addresses": {
                        "items": {
                            "required": [
                                "id"
                            ],
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                }
                            }
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "walletId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Account] or [Account] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    {\n        \"amount\": 1,\n        \"addresses\": [\n            {\n                \"id\": \"DEADBeef\"\n            },\n            {\n                \"id\": \"DEADBeef\"\n            }\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"123456\"\n    },\n    {\n        \"amount\": 3,\n        \"addresses\": [\n            {\n                \"id\": \"DEADBeef\"\n            }\n        ],\n        \"name\": \"My account\",\n        \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"id\": \"DEADBeef\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"amount\": 2,\n            \"addresses\": [\n                {\n                    \"id\": \"DEADBeef\"\n                }\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"amount\": 2,\n            \"addresses\": [\n                {\n                    \"id\": \"DEADBeef\"\n                },\n                {\n                    \"id\": \"123456\"\n                }\n            ],\n            \"name\": \"My account\",\n            \"walletId\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 96,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "OneOf [Address] (ExtendedResponse [Address])": {
            "example": [
                {
                    "id": "DEADBeef"
                }
            ],
            "items": {
                "required": [
                    "id"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Address] or [Address] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    {\n        \"id\": \"123456\"\n    },\n    {\n        \"id\": \"DEADBeef\"\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"id\": \"DEADBeef\"\n        },\n        {\n            \"id\": \"123456\"\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 96,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "Address": {
            "example": {
                "id": "DEADBeef"
            },
            "required": [
                "id"
            ],
            "type": "object",
            "description": "An Address.",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "WalletUpdate": {
            "example": {
                "name": "¯",
                "assurance": "assuranceNormal",
                "unit": 3
            },
            "required": [
                "name",
                "assurance",
                "unit"
            ],
            "type": "object",
            "description": "A type represending an update for an existing Wallet.You can still pass an entire Wallet as input, and extra  fields (which are not meant to be controlled by user) will simply be ignored.",
            "properties": {
                "name": {
                    "type": "string"
                },
                "assurance": {
                    "type": "string"
                },
                "unit": {
                    "type": "number"
                }
            }
        },
        "Account": {
            "example": {
                "amount": 3,
                "addresses": [
                    {
                        "id": "123456"
                    },
                    {
                        "id": "DEADBeef"
                    },
                    {
                        "id": "DEADBeef"
                    }
                ],
                "name": "My account",
                "walletId": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg",
                "id": "DEADBeef"
            },
            "required": [
                "amount",
                "addresses",
                "name",
                "walletId",
                "id"
            ],
            "type": "object",
            "description": "An Account.",
            "properties": {
                "amount": {
                    "type": "number",
                    "readOnly": true
                },
                "addresses": {
                    "items": {
                        "required": [
                            "id"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    },
                    "type": "array",
                    "readOnly": true
                },
                "name": {
                    "type": "string"
                },
                "walletId": {
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "Transaction": {
            "example": {
                "amount": 1,
                "confirmations": 3,
                "id": "U"
            },
            "required": [
                "amount",
                "confirmations",
                "id"
            ],
            "type": "object",
            "description": "A Wallet Transaction.",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "confirmations": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "EstimatedFees": {
            "example": {
                "estimatedAmount": 4
            },
            "required": [
                "estimatedAmount"
            ],
            "type": "object",
            "description": "Estimated fees for a `Payment`.",
            "properties": {
                "estimatedAmount": {
                    "type": "number"
                }
            }
        },
        "AccountUpdate": {
            "example": {
                "name": "myAccount"
            },
            "required": [
                "name"
            ],
            "type": "object",
            "description": "A type represending an update for an existing Account.You can still pass an entire Account as input, and extra  fields (which are not meant to be controlled by user) will simply be ignored.",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "OneOf [Wallet] (ExtendedResponse [Wallet])": {
            "example": [
                {
                    "name": "My wallet",
                    "assurance": "assuranceStrict",
                    "id": "J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg",
                    "unit": 3
                }
            ],
            "items": {
                "required": [
                    "name",
                    "assurance",
                    "id",
                    "unit"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "assurance": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "unit": {
                        "type": "number"
                    }
                }
            },
            "type": "array",
            "description": "OneOf <b>a</b> <b>b</b> is a type introduced to limit with Swagger 2.0's limitation of returning different types depending on the parameter of the request. While this has been fixed in OpenAPI 3, we effectively mimick its behaviour in 2.x. The idea is to return either ExtendedResponse [Wallet] or [Wallet] depending on whether or not the extended response format has been requested. While using the  API this type is erased away in the HTTP response, so that, in case the user requested the 'normal'  response format, an <b>a</b> will be returned. Here's an example:<br><br><pre>[\n    {\n        \"name\": \"My wallet\",\n        \"assurance\": \"assuranceStrict\",\n        \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"unit\": 1\n    },\n    {\n        \"name\": \"My wallet\",\n        \"assurance\": \"assuranceNormal\",\n        \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n        \"unit\": 3\n    }\n]</pre> In case the user selected the extended format, a full 'ExtendedResponse' will be yielded. Here's an example:<br><br><pre>{\n    \"data\": [\n        {\n            \"name\": \"My wallet\",\n            \"assurance\": \"assuranceNormal\",\n            \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"unit\": 2\n        },\n        {\n            \"name\": \"My wallet\",\n            \"assurance\": \"assuranceStrict\",\n            \"id\": \"J7rQqaLLHBFPrgJXwpktaMB1B1kQBXAyc2uRSfRPzNVGiv6TdxBzkPNBUWysZZZdhFG9gRy3sQFfX5wfpLbi4XTFGFxTg\",\n            \"unit\": 2\n        }\n    ],\n    \"meta\": {\n        \"page\": 1,\n        \"perPage\": 96,\n        \"totalPages\": 1,\n        \"totalEntries\": 2\n    }\n}</pre>"
        },
        "NewWallet": {
            "example": {
                "passphrase": "My passphrase",
                "backupPhrase": "MyBackupPhraseHashed"
            },
            "required": [
                "passphrase",
                "backupPhrase"
            ],
            "type": "object",
            "description": "A type represending an request for creating a(n) Wallet. You can still pass an entire Wallet as input, and extra  fields (which are not meant to be controlled by user) will simply be ignored.",
            "properties": {
                "passphrase": {
                    "type": "string"
                },
                "backupPhrase": {
                    "type": "string"
                }
            }
        },
        "PasswordUpdate": {
            "example": {
                "old": "Vç",
                "new": "¯"
            },
            "required": [
                "old",
                "new"
            ],
            "type": "object",
            "description": "A PasswordUpdate incapsulate a request for changing a Wallet's password.",
            "properties": {
                "old": {
                    "type": "string"
                },
                "new": {
                    "type": "string"
                }
            }
        }
    },
    "paths": {
        "/api/v1/wallets/{walletId}": {
            "get": {
                "summary": "Returns the Wallet identified by the given walletId.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "delete": {
                "summary": "Deletes the given Wallet and all its accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "put": {
                "summary": "Update the Wallet identified by the given walletId.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/accounts": {
            "post": {
                "summary": "Creates a new Account for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body` or `Daedalus-Passphrase`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Account"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "Daedalus-Passphrase",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1",
                    "Wallets"
                ]
            },
            "get": {
                "summary": "Retrieves the full list of Accounts.",
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_type` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Account] (ExtendedResponse [Account])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 500,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **500**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_type",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response type. If set to `extended`, then fetched\ndata should be wrapped in an `ExtendedResponse` (see the Models section).\nAn `ExtendedResponse` includes useful metadata which can be used by clients\nto support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "The same as URL parameter `response_type`. If the header `Daedalus-Response-Format`\nis present in the HTTP request with a value set to `extended`, the fetched data will\nbe wrapped in an `ExtendedResponse`.\n"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/v1/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V1"
                ]
            }
        },
        "/api/v1/updates": {
            "post": {
                "summary": "Applies the update. Returns info about the update being applied.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates",
                    "V1"
                ]
            }
        },
        "/api/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/payments/fees": {
            "post": {
                "summary": "Estimate the fees which would originate from the payment.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/EstimatedFees"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Payments",
                    "V1"
                ]
            }
        },
        "/api/v0/version": {
            "get": {
                "summary": "Returns the version for this API.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletVersion"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "V0"
                ]
            }
        },
        "/api/v1/payments": {
            "post": {
                "summary": "Generates a new payment from the source Account to the target Address.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Payments",
                    "V1"
                ]
            }
        },
        "/api/v1/wallets": {
            "post": {
                "summary": "Creates a new Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewWallet"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            },
            "get": {
                "summary": "Returns all the available wallets.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_type` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Wallet] (ExtendedResponse [Wallet])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 500,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **500**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_type",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response type. If set to `extended`, then fetched\ndata should be wrapped in an `ExtendedResponse` (see the Models section).\nAn `ExtendedResponse` includes useful metadata which can be used by clients\nto support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "The same as URL parameter `response_type`. If the header `Daedalus-Response-Format`\nis present in the HTTP request with a value set to `extended`, the fetched data will\nbe wrapped in an `ExtendedResponse`.\n"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/password": {
            "put": {
                "summary": "Updates the password for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/v1/wallets/{walletId}/accounts/{accountId}": {
            "get": {
                "summary": "Retrieves a specific Account, given its Id.",
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountId` not found"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Account"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1",
                    "Wallets"
                ]
            },
            "delete": {
                "summary": "Deletes an Account.",
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountId` not found"
                    },
                    "204": {
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1",
                    "Wallets"
                ]
            },
            "put": {
                "summary": "Update an Account for the given Wallet.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "404": {
                        "description": "`walletId` or `accountId` not found"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Account"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "walletId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "accountId",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AccountUpdate"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Accounts",
                    "V1",
                    "Wallets"
                ]
            }
        },
        "/api/v1/updates/next": {
            "get": {
                "summary": "Requests information about the next scheduled update.",
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/WalletUpdate"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "tags": [
                    "Updates",
                    "V1"
                ]
            }
        },
        "/api/v1/addresses": {
            "post": {
                "summary": "Creates a new Address.",
                "consumes": [
                    "application/json;charset=utf-8"
                ],
                "responses": {
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            },
            "get": {
                "summary": "Returns all the addresses.",
                "responses": {
                    "400": {
                        "description": "Invalid `Daedalus-Response-Format` or `response_type` or `per_page` or `page`"
                    },
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/OneOf [Address] (ExtendedResponse [Address])"
                        },
                        "description": ""
                    }
                },
                "produces": [
                    "application/json;charset=utf-8"
                ],
                "parameters": [
                    {
                        "default": 1,
                        "minimum": 1,
                        "in": "query",
                        "name": "page",
                        "type": "integer",
                        "description": "The page number to fetch for this request. The minimum is **1**.\nIf nothing is specified, **this value defaults to 1** and always shows the first\nentries in the requested collection.\n"
                    },
                    {
                        "maximum": 500,
                        "default": 10,
                        "minimum": 1,
                        "in": "query",
                        "name": "per_page",
                        "type": "integer",
                        "description": "The number of entries to display for each page. The minimum is **1**, whereas the maximum\nis **500**. If nothing is specified, **this value defaults to 10**.\n"
                    },
                    {
                        "default": "plain",
                        "in": "query",
                        "name": "response_type",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "Determines the response type. If set to `extended`, then fetched\ndata should be wrapped in an `ExtendedResponse` (see the Models section).\nAn `ExtendedResponse` includes useful metadata which can be used by clients\nto support pagination.\n"
                    },
                    {
                        "default": "plain",
                        "in": "header",
                        "name": "Daedalus-Response-Format",
                        "type": "string",
                        "enum": [
                            "plain",
                            "extended"
                        ],
                        "description": "The same as URL parameter `response_type`. If the header `Daedalus-Response-Format`\nis present in the HTTP request with a value set to `extended`, the fetched data will\nbe wrapped in an `ExtendedResponse`.\n"
                    }
                ],
                "tags": [
                    "Addresses",
                    "V1"
                ]
            }
        }
    }
}
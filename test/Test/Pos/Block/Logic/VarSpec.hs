-- | Specification of 'Pos.Block.Logic.VAR'.

module Test.Pos.Block.Logic.VarSpec
       ( spec
       ) where

import           Universum
import           Unsafe                    (unsafeHead)

import           Data.List                 (span)
import           Data.List.NonEmpty        (NonEmpty ((:|)))
import qualified Data.List.NonEmpty        as NE
import           Test.Hspec                (Spec, describe)
import           Test.Hspec.QuickCheck     (modifyMaxSuccess, prop)
import           Test.QuickCheck.Monadic   (assert, pre)

import           Pos.Block.Logic           (applyBlocks, verifyBlocksPrefix)
import           Pos.Core                  (SlotId (..), epochIndexL)
import           Pos.DB.Pure               (cloneDBPure)
import           Pos.Util                  (_neLast)
import           Pos.Util.Chrono           (OldestFirst (..))

import           Test.Pos.Block.Logic.Mode (BlockProperty, btcDBPureVar_L)
import           Test.Pos.Block.Logic.Util (bpGenBlocks, bpGoToArbitraryState,
                                            withCurrentSlot)
import           Test.Pos.Util             (stopProperty)

spec :: Spec
-- Unfortunatelly, blocks generation is currently extremely slow.
-- Maybe we will optimize it in future.
spec = describe "Block.Logic.VAR" $ modifyMaxSuccess (const 3) $ do
    describe "verifyBlocksPrefix" verifyBlocksPrefixSpec
    describe "applyBlocks" applyBlocksSpec

----------------------------------------------------------------------------
-- verifyBlocksPrefix
----------------------------------------------------------------------------

verifyBlocksPrefixSpec :: Spec
verifyBlocksPrefixSpec = do
    prop verifyEmptyMainBlockDesc verifyEmptyMainBlock
    prop verifyValidBlocksDesc verifyValidBlocks
  where
    verifyEmptyMainBlockDesc =
        "verification of consistent empty main block " <>
        "created by the leader of the 0-th slot " <>
        "always succeeds for initial GState"
    verifyValidBlocksDesc =
        "verification of (hopefully) valid blocks " <>
        "generated by the block generator " <>
        "always succeeds for GState for which these blocks where generated " <>
        "as long as all these blocks are from the same epoch"

verifyEmptyMainBlock :: BlockProperty ()
verifyEmptyMainBlock = do
    emptyBlock <- fst . unsafeHead . getOldestFirst <$> bpGenBlocks (Just 1)
    whenLeftM (lift $ verifyBlocksPrefix (one emptyBlock)) stopProperty

verifyValidBlocks :: BlockProperty ()
verifyValidBlocks = do
    bpGoToArbitraryState
    blocks <- map fst . toList <$> bpGenBlocks Nothing
    pre (not $ null blocks)
    let blocksToVerify =
            case blocks of
                [] -> error "verifyValidBlocks: impossible"
                (block0:otherBlocks) ->
                    let (otherBlocks', _) = span isRight otherBlocks
                    in block0 :| otherBlocks'
    let lastEpoch = blocksToVerify ^. _neLast . epochIndexL
    verRes <-
        lift $ withCurrentSlot (SlotId (lastEpoch + 1) minBound) $
        verifyBlocksPrefix $
        OldestFirst blocksToVerify
    whenLeft verRes stopProperty

----------------------------------------------------------------------------
-- applyBlocks
----------------------------------------------------------------------------

applyBlocksSpec :: Spec
applyBlocksSpec = do
    prop applyByOneOrAllAtOnceDesc applyByOneOrAllAtOnce
  where
    applyByOneOrAllAtOnceDesc =
        "applying blocks one by one leads to the same GState as " <>
        "applying them all at once"

applyByOneOrAllAtOnce :: BlockProperty ()
applyByOneOrAllAtOnce = do
    bpGoToArbitraryState
    blunds <- getOldestFirst <$> bpGenBlocks Nothing
    pre (not $ null blunds)
    let blundsNE = OldestFirst (NE.fromList blunds)
    dbPureVar <- lift (view btcDBPureVar_L)
    clonedDBPureVar <- cloneDBPure dbPureVar
    lift (applyBlocks True Nothing blundsNE)
    dbPure <- readIORef dbPureVar
    dbPureCloned <-
        lift $
        local (set btcDBPureVar_L clonedDBPureVar) $ do
            applyBlocks True Nothing blundsNE
            readIORef dbPureVar
    assert (dbPure == dbPureCloned)

-- | Specification of 'Pos.Block.Logic.VAR'.

module Test.Pos.Block.Logic.VarSpec
       ( spec
       ) where

import           Universum
import           Unsafe                    (unsafeHead)

import           Data.List                 (span)
import           Data.List.NonEmpty        (NonEmpty ((:|)))
import           Test.Hspec                (Spec, describe)
import           Test.Hspec.QuickCheck     (modifyMaxSuccess, prop)
import           Test.QuickCheck.Monadic   (pre)

import           Pos.Block.Logic           (verifyBlocksPrefix)
import           Pos.Core                  (SlotId (..), epochIndexL)
import           Pos.Util                  (_neLast)
import           Pos.Util.Chrono           (OldestFirst (..))

import           Test.Pos.Block.Logic.Mode (BlockProperty)
import           Test.Pos.Block.Logic.Util (bpGenBlocks, bpGoToArbitraryState,
                                            withCurrentSlot)
import           Test.Pos.Util             (stopProperty)

spec :: Spec
spec = describe "Block.Logic.VAR" $ do
    describe "verifyBlocksPrefix" verifyBlocksPrefixSpec

----------------------------------------------------------------------------
-- verifyBlocksPrefix
----------------------------------------------------------------------------

verifyBlocksPrefixSpec :: Spec
-- Unfortunatelly, blocks generation is currently extremely slow.
-- Maybe we will optimize it in future.
verifyBlocksPrefixSpec = modifyMaxSuccess (const 3) $ do
    prop verifyEmptyMainBlockDesc verifyEmptyMainBlock
    prop verifyValidBlocksDesc verifyValidBlocks
  where
    verifyEmptyMainBlockDesc =
        "verification of consistent empty main block " <>
        "created by the leader of the 0-th slot " <>
        "always succeeds for initial GState"
    verifyValidBlocksDesc =
        "verification of (hopefully) valid blocks " <>
        "generated by the block generator " <>
        "always succeeds for GState for which these blocks where generated " <>
        "as long as all these blocks are from the same epoch"

verifyEmptyMainBlock :: BlockProperty ()
verifyEmptyMainBlock = do
    emptyBlock <- fst . unsafeHead . getOldestFirst <$> bpGenBlocks (Just 1)
    whenLeftM (lift $ verifyBlocksPrefix (one emptyBlock)) stopProperty

verifyValidBlocks :: BlockProperty ()
verifyValidBlocks = do
    bpGoToArbitraryState
    blocks <- map fst . toList <$> bpGenBlocks Nothing
    pre (not $ null blocks)
    let blocksToVerify =
            case blocks of
                [] -> error "verifyValidBlocks: impossible"
                (block0:otherBlocks) ->
                    let (otherBlocks', _) = span isRight otherBlocks
                    in block0 :| otherBlocks'
    let lastEpoch = blocksToVerify ^. _neLast . epochIndexL
    verRes <-
        lift $ withCurrentSlot (SlotId (lastEpoch + 1) minBound) $
        verifyBlocksPrefix $
        OldestFirst blocksToVerify
    whenLeft verRes stopProperty

{-# LANGUAGE DeriveGeneric   #-}
{-# LANGUAGE TemplateHaskell #-}

-- | Base of GodTossing SSC.

module Pos.Ssc.GodTossing.Types.Base
       (
         -- * Types
         Commitment (..)
       , CommitmentSignature
       , SignedCommitment
       , CommitmentsMap
       , Opening (..)
       , OpeningsMap
       , SharesMap
       , VssCertificate
       , VssCertificatesMap
       , PKSet
       ) where


import           Data.Binary         (Binary)
import           Data.SafeCopy       (base, deriveSafeCopySimple)
import           Data.Text.Buildable (Buildable (..))
import           Universum

import           Pos.Crypto          (LEncShare, LSecret, LSecretProof,
                                      LSecretSharingExtra, LShare, LVssPublicKey,
                                      PublicKey, Signature, Signed (..))
import           Pos.Types.Types     (EpochIndex)

----------------------------------------------------------------------------
-- Types, instances
----------------------------------------------------------------------------
type PKSet = HashSet PublicKey

-- | Commitment is a message generated during the first stage of
-- MPC. It contains encrypted shares and proof of secret.
data Commitment = Commitment
    { commExtra  :: !LSecretSharingExtra
    , commProof  :: !LSecretProof
    , commShares :: !(HashMap LVssPublicKey LEncShare)
    } deriving (Show, Eq, Generic)

instance Binary Commitment

-- | Signature which ensures that commitment was generated by node
-- with given public key for given epoch.
type CommitmentSignature = Signature (EpochIndex, Commitment)

type SignedCommitment = (Commitment, CommitmentSignature)

type CommitmentsMap = HashMap PublicKey (Commitment, CommitmentSignature)

-- | Opening reveals secret.
newtype Opening = Opening
    { getOpening :: LSecret
    } deriving (Show, Eq, Generic, Binary, Buildable)

type OpeningsMap = HashMap PublicKey Opening

-- | Each node generates a 'SharedSeed', breaks it into 'Share's, and sends
-- those encrypted shares to other nodes. In a 'SharesMap', for each node we
-- collect shares which said node has received and decrypted.
--
-- Specifically, if node identified by 'PublicKey' X has received a share
-- from node identified by key Y, this share will be at @sharesMap ! X ! Y@.
type SharesMap = HashMap PublicKey (HashMap PublicKey LShare)

-- | VssCertificate allows VssPublicKey to participate in MPC.
-- Each stakeholder should create a Vss keypair, sign public key with signing
-- key and send it into blockchain.
--
-- Other nodes accept this certificate if it is valid and if node really
-- has some stake.
type VssCertificate = Signed LVssPublicKey

-- | VssCertificatesMap contains all valid certificates collected
-- during some period of time.
type VssCertificatesMap = HashMap PublicKey VssCertificate

deriveSafeCopySimple 0 'base ''Opening
deriveSafeCopySimple 0 'base ''Commitment

module Explorer.Types.State where

import Control.SocketIO.Client (Socket)
import Data.Generic (class Generic, gEq)
import Data.Maybe (Maybe)
import Data.Newtype (class Newtype)
import Explorer.I18n.Lang (Language)
import Explorer.Routes (Route)
import Pos.Explorer.Socket.Methods (Subscription)
import Pos.Explorer.Web.ClientTypes (CAddressSummary, CBlockEntry, CBlockSummary, CTxEntry, CTxSummary, CTxBrief)
import Prelude (class Eq, class Ord)

-- Add all State types here to generate lenses from it

type State =
    { lang :: Language
    , route :: Route
    , socket :: SocketState
    , viewStates :: ViewStates
    , latestBlocks :: CBlockEntries
    , initialBlocksRequested :: Boolean
    , handleLatestBlocksSocketResult :: Boolean
    , initialTxsRequested :: Boolean
    , handleLatestTxsSocketResult :: Boolean
    , currentBlockSummary :: Maybe CBlockSummary
    , currentBlockTxs :: Maybe CTxBriefs
    , currentTxSummary :: Maybe CTxSummary
    , latestTransactions :: CTxEntries
    , currentAddressSummary :: Maybe CAddressSummary
    , errors :: Errors
    , loading :: Boolean
    }

type SocketState =
    { connected :: Boolean
    , connection :: Maybe Socket
    , subscriptions :: Array SocketSubscription
    }

data DashboardAPICode = Curl | Node | JQuery

derive instance eqDashboardAPICode :: Eq DashboardAPICode
derive instance ordDashboardAPICode :: Ord DashboardAPICode

-- Wrapper of 'Subscription' built by 'purescript bridge'
-- needed to derive generice instances of it
newtype SocketSubscription = SocketSubscription Subscription
derive instance gSocketSubscription :: Generic SocketSubscription
derive instance newtypeSocketSubscription :: Newtype SocketSubscription _
instance eqSocketSubscription :: Eq SocketSubscription where
  eq = gEq

type CBlockEntries = Array CBlockEntry
type CTxEntries = Array CTxEntry
type CTxBriefs = Array CTxBrief

type Errors = Array String

type ViewStates =
    { dashboard :: DashboardViewState
    , addressDetail :: AddressDetailViewState
    , blockDetail :: BlockDetailViewState
    }

type DashboardViewState =
    { blocksExpanded :: Boolean
    , dashboardBlockPagination :: Int
    , transactionsExpanded :: Boolean
    , selectedApiCode :: DashboardAPICode
    , searchInput :: Boolean
    }

type BlockDetailViewState =
    { blockTxPagination :: Int
    }

type AddressDetailViewState =
    { addressTxPagination :: Int
    }

-- TODO (jk) CCurrency should be generated by purescript-bridge later
data CCurrency =
      ADA
    | BTC
    | USD

-- File auto generated by purescript-bridge! --
module Pos.Explorer.Web.ClientTypes where

import Data.Lens (Lens', Prism', lens, prism')
import Data.Maybe (Maybe, Maybe(..))
import Data.Time.NominalDiffTime (NominalDiffTime)
import Data.Tuple (Tuple)
import Prim (Array, Boolean, Int, String)

import Prelude
import Data.Generic (class Generic)

newtype CAddress =
    CAddress String

derive instance genericCAddress :: Generic CAddress

--------------------------------------------------------------------------------
_CAddress :: Prism' CAddress String
_CAddress = prism' CAddress f
  where
    f (CAddress a) = Just $ a


--------------------------------------------------------------------------------
newtype CAddressSummary =
    CAddressSummary {
      caAddress :: CAddress
    , caType :: CAddressType
    , caTxNum :: Int
    , caBalance :: CCoin
    , caTxList :: Array CTxBrief
    }

derive instance genericCAddressSummary :: Generic CAddressSummary

--------------------------------------------------------------------------------
_CAddressSummary :: Prism' CAddressSummary { caAddress :: CAddress, caType :: CAddressType, caTxNum :: Int, caBalance :: CCoin, caTxList :: Array CTxBrief}
_CAddressSummary = prism' CAddressSummary f
  where
    f (CAddressSummary r) = Just r


--------------------------------------------------------------------------------
newtype CBlockEntry =
    CBlockEntry {
      cbeEpoch :: Int
    , cbeSlot :: Int
    , cbeBlkHash :: CHash
    , cbeTimeIssued :: Maybe NominalDiffTime
    , cbeTxNum :: Int
    , cbeTotalSent :: CCoin
    , cbeSize :: Int
    , cbeBlockLead :: Maybe String
    , cbeFees :: CCoin
    }

derive instance genericCBlockEntry :: Generic CBlockEntry

--------------------------------------------------------------------------------
_CBlockEntry :: Prism' CBlockEntry { cbeEpoch :: Int, cbeSlot :: Int, cbeBlkHash :: CHash, cbeTimeIssued :: Maybe NominalDiffTime, cbeTxNum :: Int, cbeTotalSent :: CCoin, cbeSize :: Int, cbeBlockLead :: Maybe String, cbeFees :: CCoin}
_CBlockEntry = prism' CBlockEntry f
  where
    f (CBlockEntry r) = Just r


--------------------------------------------------------------------------------
newtype CBlockSummary =
    CBlockSummary {
      cbsEntry :: CBlockEntry
    , cbsPrevHash :: CHash
    , cbsNextHash :: Maybe CHash
    , cbsMerkleRoot :: CHash
    }

derive instance genericCBlockSummary :: Generic CBlockSummary

--------------------------------------------------------------------------------
_CBlockSummary :: Prism' CBlockSummary { cbsEntry :: CBlockEntry, cbsPrevHash :: CHash, cbsNextHash :: Maybe CHash, cbsMerkleRoot :: CHash}
_CBlockSummary = prism' CBlockSummary f
  where
    f (CBlockSummary r) = Just r


--------------------------------------------------------------------------------
data CAddressType =
    CPubKeyAddress 
  | CScriptAddress 
  | CRedeemAddress 
  | CUnknownAddress 

derive instance genericCAddressType :: Generic CAddressType

--------------------------------------------------------------------------------
_CPubKeyAddress :: Prism' CAddressType Unit
_CPubKeyAddress = prism' (\_ -> CPubKeyAddress) f
  where
    f CPubKeyAddress = Just unit
    f _ = Nothing

_CScriptAddress :: Prism' CAddressType Unit
_CScriptAddress = prism' (\_ -> CScriptAddress) f
  where
    f CScriptAddress = Just unit
    f _ = Nothing

_CRedeemAddress :: Prism' CAddressType Unit
_CRedeemAddress = prism' (\_ -> CRedeemAddress) f
  where
    f CRedeemAddress = Just unit
    f _ = Nothing

_CUnknownAddress :: Prism' CAddressType Unit
_CUnknownAddress = prism' (\_ -> CUnknownAddress) f
  where
    f CUnknownAddress = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype CHash =
    CHash String

derive instance genericCHash :: Generic CHash

--------------------------------------------------------------------------------
_CHash :: Prism' CHash String
_CHash = prism' CHash f
  where
    f (CHash a) = Just $ a


--------------------------------------------------------------------------------
newtype CNetworkAddress =
    CNetworkAddress String

derive instance genericCNetworkAddress :: Generic CNetworkAddress

--------------------------------------------------------------------------------
_CNetworkAddress :: Prism' CNetworkAddress String
_CNetworkAddress = prism' CNetworkAddress f
  where
    f (CNetworkAddress a) = Just $ a


--------------------------------------------------------------------------------
newtype CTxBrief =
    CTxBrief {
      ctbId :: CTxId
    , ctbTimeIssued :: Maybe NominalDiffTime
    , ctbInputs :: Array (Maybe (Tuple CAddress CCoin))
    , ctbOutputs :: Array (Tuple CAddress CCoin)
    , ctbInputSum :: CCoin
    , ctbOutputSum :: CCoin
    }

derive instance genericCTxBrief :: Generic CTxBrief

--------------------------------------------------------------------------------
_CTxBrief :: Prism' CTxBrief { ctbId :: CTxId, ctbTimeIssued :: Maybe NominalDiffTime, ctbInputs :: Array (Maybe (Tuple CAddress CCoin)), ctbOutputs :: Array (Tuple CAddress CCoin), ctbInputSum :: CCoin, ctbOutputSum :: CCoin}
_CTxBrief = prism' CTxBrief f
  where
    f (CTxBrief r) = Just r


--------------------------------------------------------------------------------
newtype CTxEntry =
    CTxEntry {
      cteId :: CTxId
    , cteTimeIssued :: Maybe NominalDiffTime
    , cteAmount :: CCoin
    }

derive instance genericCTxEntry :: Generic CTxEntry

--------------------------------------------------------------------------------
_CTxEntry :: Prism' CTxEntry { cteId :: CTxId, cteTimeIssued :: Maybe NominalDiffTime, cteAmount :: CCoin}
_CTxEntry = prism' CTxEntry f
  where
    f (CTxEntry r) = Just r


--------------------------------------------------------------------------------
newtype CTxId =
    CTxId CHash

derive instance genericCTxId :: Generic CTxId

--------------------------------------------------------------------------------
_CTxId :: Prism' CTxId CHash
_CTxId = prism' CTxId f
  where
    f (CTxId a) = Just $ a


--------------------------------------------------------------------------------
newtype CTxSummary =
    CTxSummary {
      ctsId :: CTxId
    , ctsTxTimeIssued :: Maybe NominalDiffTime
    , ctsBlockTimeIssued :: Maybe NominalDiffTime
    , ctsBlockHeight :: Maybe Int
    , ctsBlockEpoch :: Maybe Int
    , ctsBlockSlot :: Maybe Int
    , ctsBlockHash :: Maybe CHash
    , ctsRelayedBy :: Maybe CNetworkAddress
    , ctsTotalInput :: CCoin
    , ctsTotalOutput :: CCoin
    , ctsFees :: CCoin
    , ctsInputs :: Array (Maybe (Tuple CAddress CCoin))
    , ctsOutputs :: Array (Tuple CAddress CCoin)
    }

derive instance genericCTxSummary :: Generic CTxSummary

--------------------------------------------------------------------------------
_CTxSummary :: Prism' CTxSummary { ctsId :: CTxId, ctsTxTimeIssued :: Maybe NominalDiffTime, ctsBlockTimeIssued :: Maybe NominalDiffTime, ctsBlockHeight :: Maybe Int, ctsBlockEpoch :: Maybe Int, ctsBlockSlot :: Maybe Int, ctsBlockHash :: Maybe CHash, ctsRelayedBy :: Maybe CNetworkAddress, ctsTotalInput :: CCoin, ctsTotalOutput :: CCoin, ctsFees :: CCoin, ctsInputs :: Array (Maybe (Tuple CAddress CCoin)), ctsOutputs :: Array (Tuple CAddress CCoin)}
_CTxSummary = prism' CTxSummary f
  where
    f (CTxSummary r) = Just r


--------------------------------------------------------------------------------
newtype CCoin =
    CCoin {
      getCoin :: String
    }

derive instance genericCCoin :: Generic CCoin

--------------------------------------------------------------------------------
_CCoin :: Prism' CCoin { getCoin :: String}
_CCoin = prism' CCoin f
  where
    f (CCoin r) = Just r


--------------------------------------------------------------------------------
newtype CGenesisSummary =
    CGenesisSummary {
      cgsNumTotal :: Int
    , cgsNumRedeemed :: Int
    }

derive instance genericCGenesisSummary :: Generic CGenesisSummary

--------------------------------------------------------------------------------
_CGenesisSummary :: Prism' CGenesisSummary { cgsNumTotal :: Int, cgsNumRedeemed :: Int}
_CGenesisSummary = prism' CGenesisSummary f
  where
    f (CGenesisSummary r) = Just r


--------------------------------------------------------------------------------
newtype CGenesisAddressInfo =
    CGenesisAddressInfo {
      cgaiCardanoAddress :: CAddress
    , cgaiGenesisAmount :: CCoin
    , cgaiIsRedeemed :: Boolean
    }

derive instance genericCGenesisAddressInfo :: Generic CGenesisAddressInfo

--------------------------------------------------------------------------------
_CGenesisAddressInfo :: Prism' CGenesisAddressInfo { cgaiCardanoAddress :: CAddress, cgaiGenesisAmount :: CCoin, cgaiIsRedeemed :: Boolean}
_CGenesisAddressInfo = prism' CGenesisAddressInfo f
  where
    f (CGenesisAddressInfo r) = Just r


--------------------------------------------------------------------------------
